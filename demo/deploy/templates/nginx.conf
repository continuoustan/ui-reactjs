worker_processes  1;
pid                {{config_prefix}}/var/run/nginx.pid;
error_log          {{config_logdir}}/nginx-error.log {{nginx_loglevel}};
daemon              off;

events {
  worker_connections  1024;
}

http {
    # Some sensible defaults.
    include                 mime.types;
    default_type            application/octet-stream;
    keepalive_timeout       10;
    client_max_body_size    20m;
    sendfile                on;
    gzip                    on;
    gzip_http_version       1.1;
    gzip_vary               on;
    gzip_comp_level         6;
    gzip_proxied            any;
    gzip_types text/plain text/css text/javascript application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss;
    gzip_disable "MSIE [1-6].(?!.*SV1)";

    # Directories
    client_body_temp_path {{config_prefix}}/tmp/client_body/  2 2;
    fastcgi_temp_path     {{config_prefix}}/tmp/fastcgi/;
    proxy_temp_path       {{config_prefix}}/tmp/proxy/;
    uwsgi_temp_path       {{config_prefix}}/tmp/uwsgi/;

    # Logging
    access_log            {{config_logdir}}/nginx-access.log  combined;
    error_log             {{config_logdir}}/nginx-error.log {{nginx_loglevel}};


    # uWSGI serving Django.
    upstream django {
        ip_hash;
        server unix:{{uwsgi_socket}};
    }

    server {
        root {{config_prefix}}/var/www;
        listen      {{nginx_http_port}};
        server_name {{nginx_server_name}};
        charset     utf-8;

        location /media {
          alias {{django_media_root}};
          autoindex on;
          access_log off;
        }

        location /static {
            alias {{django_static_root}};
            autoindex on;
            access_log off;
            expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public";
        }


        location / {
            if ($http_origin ~* (https?://[^/]*\.wfp\.org(:[0-9]+)?)) {
                # Tells the browser this origin may make cross-origin requests
                # (Here, we echo the requesting origin, which matched the whitelist.)
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
                add_header 'Access-Control-Allow-Credentials' 'true';
                # # Tell the browser which response headers the JS can see, besides the "simple response headers"
                # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
            }

            uwsgi_param	QUERY_STRING		$query_string;
            uwsgi_param	REQUEST_METHOD		$request_method;
            uwsgi_param	CONTENT_TYPE		$content_type;
            uwsgi_param	CONTENT_LENGTH		$content_length;

            uwsgi_param	REQUEST_URI		$request_uri;
            uwsgi_param	PATH_INFO		$document_uri;
            uwsgi_param	DOCUMENT_ROOT		$document_root;
            uwsgi_param	SERVER_PROTOCOL		$server_protocol;

            uwsgi_param	REMOTE_ADDR		$remote_addr;
            uwsgi_param	REMOTE_PORT		$remote_port;
            uwsgi_param	SERVER_PORT		$server_port;
            uwsgi_param	SERVER_NAME		$server_name;

            uwsgi_pass  django;
            uwsgi_read_timeout 900;
        }
    }
}
